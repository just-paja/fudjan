#!/usr/bin/php
<?

/** Compress PHP code
 * @param string $src URL or code
 * @returns string
 */
function compress_php_src($src) {
	// Whitespaces left and right from this signs can be ignored
	static $IW = array(
		T_CONCAT_EQUAL,			// .=
		T_DOUBLE_ARROW,			// =>
		T_BOOLEAN_AND,			 // &&
		T_BOOLEAN_OR,			  // ||
		T_IS_EQUAL,				// ==
		T_IS_NOT_EQUAL,			// != or <>
		T_IS_SMALLER_OR_EQUAL,	 // <=
		T_IS_GREATER_OR_EQUAL,	 // >=
		T_INC,					 // ++
		T_DEC,					 // --
		T_PLUS_EQUAL,			  // +=
		T_MINUS_EQUAL,			 // -=
		T_MUL_EQUAL,				// *=
		T_DIV_EQUAL,				// /=
		T_IS_IDENTICAL,			// ===
		T_IS_NOT_IDENTICAL,		// !==
		T_DOUBLE_COLON,			// ::
		T_PAAMAYIM_NEKUDOTAYIM,	// ::
		T_OBJECT_OPERATOR,		 // ->
		T_DOLLAR_OPEN_CURLY_BRACES, // ${
		T_AND_EQUAL,				// &=
		T_MOD_EQUAL,				// %=
		T_XOR_EQUAL,				// ^=
		T_OR_EQUAL,				// |=
		T_SL,					  // <<
		T_SR,					  // >>
		T_SL_EQUAL,				// <<=
		T_SR_EQUAL,				// >>=
	);

	if(is_file($src)) {
		if(!$src = file_get_contents($src)) {
			return false;
		}
	}

	$tokens = token_get_all($src);
	$new = "";
	$c = sizeof($tokens);
	$iw = false; // ignore whitespace
	$ih = false; // in HEREDOC
	$ls = "";	// last sign
	$ot = null;  // open tag

	for($i = 0; $i < $c; $i++) {
		$token = $tokens[$i];
		if(is_array($token)) {
			list($tn, $ts) = $token; // tokens: number, string, line
			$tname = token_name($tn);
			if($tn == T_INLINE_HTML) {
				$new .= $ts;
				$iw = false;
			} else {
				if($tn == T_OPEN_TAG) {
					if(strpos($ts, " ") || strpos($ts, "\n") || strpos($ts, "\t") || strpos($ts, "\r")) {
						$ts = rtrim($ts);
					}
					$ts .= " ";
					$new .= $ts;
					$ot = T_OPEN_TAG;
					$iw = true;
				} elseif ($tn == T_OPEN_TAG_WITH_ECHO) {
					$new .= $ts;
					$ot = T_OPEN_TAG_WITH_ECHO;
					$iw = true;
				} elseif($tn == T_CLOSE_TAG) {
					if($ot == T_OPEN_TAG_WITH_ECHO) {
						$new = rtrim($new, "; ");
					} else {
						$ts = " ".$ts;
					}
					$new .= $ts;
					$ot = null;
					$iw = false;
				} elseif(in_array($tn, $IW)) {
					$new .= $ts;
					$iw = true;
				} elseif($tn == T_CONSTANT_ENCAPSED_STRING
						|| $tn == T_ENCAPSED_AND_WHITESPACE)
				{
					if($ts[0] == '"') {
						$ts = addcslashes($ts, "\n\t\r");
					}
					$new .= $ts;
					$iw = true;
				} elseif($tn == T_WHITESPACE) {
					$nt = @$tokens[$i+1];
					if(!$iw && (!is_string($nt) || $nt == '$') && !in_array($nt[0], $IW)) {
						$new .= " ";
					}
					$iw = false;
				} elseif($tn == T_START_HEREDOC) {
					$new .= "<<<S\n";
					$iw = false;
					$ih = true; // in HEREDOC
				} elseif($tn == T_END_HEREDOC) {
					$new .= "S;";
					$iw = true;
					$ih = false; // in HEREDOC
					for($j = $i+1; $j < $c; $j++) {
						if(is_string($tokens[$j]) && $tokens[$j] == ";") {
							$i = $j;
							break;
						} else if($tokens[$j][0] == T_CLOSE_TAG) {
							break;
						}
					}
				} elseif($tn == T_COMMENT || $tn == T_DOC_COMMENT) {
					$iw = true;
				} else {
					$new .= $ts;
					$iw = false;
				}
			}
			$ls = "";
		} else {
			if(($token != ";" && $token != ":") || $ls != $token) {
				$new .= $token;
				$ls = $token;
			}
			$iw = true;
		}
	}
	return $new;
}


function strip_code($files)
{
	$code = '';



	return $code;
}


function read_dir($dir, array &$files, array &$directories, array &$used = array())
{
	$od = opendir($dir);
	while ($f = readdir($od)) {
		if ($f != '.' && $f != '..') {
			$fp = $dir.'/'.$f;
			if (is_dir($fp)) {
				read_dir($fp, $files, $directories);
				if (!in_array($fp, $used)) {
					$directories[] = $fp;
					$used[] = $fp;
				}
			} else {
				if (!in_array($fp, $used)) {
					$files[] = $fp;
					$used[] = $fp;
				}
			}
		}
	}
	closedir($od);
}


define('ROOT', realpath(__DIR__.'/..'));
define('CONSOLE_WIDTH', 30);

require_once ROOT.'/www/lib/include/constants.cli.php';
require_once ROOT.'/www/lib/include/functions.php';
require_once ROOT.'/www/lib/include/functions.cli.php';
require_once ROOT.'/www/lib/class/system/cli.php';


define('PACKAGE_DIR', ROOT.'/packages');
define('PACKAGE_NAME', 'yawf');
define('PACKAGE_CATEGORY', 'core');
define('PACKAGE_VERSION', exec(ROOT.'/scripts/get-version.sh'));
define('PACKAGE_BRANCH', 'testing');

define('PROJECT_NAME', 'YaWF');
define('PROJECT_DESC', 'Yet Another Web Framework');

define('WORKING_FILE', PACKAGE_DIR.'/'.PACKAGE_NAME.'-'.PACKAGE_VERSION);
define('WORKING_DIR', PACKAGE_DIR.'/temp');
define('WORKING_DIR_DATA', PACKAGE_DIR.'/temp/data');
define('WORKING_DIR_META', PACKAGE_DIR.'/temp/meta');
define('WORKING_DIR_CLASSES', WORKING_DIR_DATA.'/lib/class/system');
define('WORKING_TEMP_FILE', WORKING_DIR.'/tmp.tar');

define('WORKING_FILE_VERSION', WORKING_DIR_META.'/version');
define('WORKING_FILE_CHECKSUM', WORKING_DIR_META.'/checksum');
define('WORKING_FILE_SYSTEM_CLASSES', WORKING_DIR_DATA.'/lib/include/system.php');


// Prepare workspace
@unlink(WORKING_FILE.'.tar.bz2');
exec('rm -R '.WORKING_DIR);
@mkdir(WORKING_DIR, 0770, true);
@mkdir(WORKING_DIR_DATA, 0770, true);
@mkdir(WORKING_DIR_META, 0770, true);


out('Compiling package .. ');

// Prepare data and meta
$msg = 'Preparing data';
show_progress_cli(0, 100, CONSOLE_WIDTH, '', $msg);
exec('cd "'.ROOT.'/www"; git archive --format tar master > '.WORKING_TEMP_FILE);

show_progress_cli(50, 100, CONSOLE_WIDTH, '', $msg);
exec('
	cd '.WORKING_DIR_DATA.'; 
	tar -xf '.WORKING_TEMP_FILE.';
	git log > '.WORKING_DIR_META.'/changelog;
	echo '.PROJECT_NAME.'	> '.WORKING_FILE_VERSION.';
	echo '.PROJECT_DESC.'	>> '.WORKING_FILE_VERSION.';
	echo '.PACKAGE_VERSION.' >> '.WORKING_FILE_VERSION.';
	echo '.PACKAGE_CATEGORY.'/'.PACKAGE_NAME.' >> '.WORKING_FILE_VERSION.';
	rm '.WORKING_TEMP_FILE.';
	mkdir '.WORKING_DIR_DATA.'/share;
	mkdir '.WORKING_DIR_DATA.'/var;
	chmod 777 '.WORKING_DIR_DATA.'/var;
');
show_progress_cli(100, 100, CONSOLE_WIDTH, '', $msg);



// Optimize system code
$msg = 'Compiling system code';
show_progress_cli(0, 100, CONSOLE_WIDTH, '', $msg);

$code  = '<? ';
$code .= 'define(\'YAWF_PACKED\', true);';
$minified = array();
$dirs = array();
$used = array();

read_dir(WORKING_DIR_CLASSES.'/model', $minified, $dirs, $used);
read_dir(WORKING_DIR_CLASSES, $minified, $dirs, $used);
$minified[] = WORKING_DIR_DATA.'/lib/include/core.php';
$minified[] = WORKING_DIR_DATA.'/lib/include/functions.php';
$minified[] = WORKING_DIR_DATA.'/lib/include/aliases.php';

$total = count($minified);

foreach($minified as $key=>$file) {
	$code .= str_replace(array('<?php', '<?', "\t", "\n"), '', compress_php_src($file));
	show_progress_cli($key+1, $total, CONSOLE_WIDTH, '', $msg);
}

file_put_contents(WORKING_FILE_SYSTEM_CLASSES, $code);



// Delete optimized files
$msg = 'Deleting minified files';
show_progress_cli(0, $total, CONSOLE_WIDTH, '', $msg);
foreach ($minified as $key=>$file) {
	@unlink($file);
	show_progress_cli($key+1, $total, CONSOLE_WIDTH, '', $msg);
}
exec('rm -R '.WORKING_DIR_CLASSES);



// Create files checksum
$msg = 'Calculating package checksums';
show_progress_cli(1, 1000, CONSOLE_WIDTH, '', $msg);
$files = array_filter(explode("\n", shell_exec('cd www; git ls-files')));
$total = count($files);
$banned_files = array(
	'.htaccess',
	'install.php',
	'meta/checksum',
	'meta/changelog',
	'meta/version',
);

foreach ($minified as $file) {
	$banned_files[] = str_replace(WORKING_DIR_DATA.'/', '', $file);
}

foreach ($files as $key=>$file) {
	if (!in_array($file, $banned_files) && strpos($file, 'lib/class/system') === false) {
		exec('cd '.WORKING_DIR_DATA.'; md5sum '.$file.' >> '.WORKING_FILE_CHECKSUM);
	}
	show_progress_cli($key+1, $total, CONSOLE_WIDTH, '', $msg);
}

exec('cd '.WORKING_DIR_DATA.'; md5sum '.str_replace(WORKING_DIR_DATA.'/', '', WORKING_FILE_SYSTEM_CLASSES).' >> '.WORKING_FILE_CHECKSUM);

// Pack it all together
$msg = 'Creating package archive';
show_progress_cli(0, 100, CONSOLE_WIDTH, '', $msg);
exec('cd '.WORKING_DIR.'; tar -c `ls` > '.WORKING_FILE.'.tar');
show_progress_cli(50, 100, CONSOLE_WIDTH, '', $msg);
exec('cd '.WORKING_DIR.'; bzip2 '.WORKING_FILE.'.tar');
show_progress_cli(100, 100, CONSOLE_WIDTH, '', $msg);


// Clean temp files
$msg = 'Cleaning workspace';
show_progress_cli(0, 100, CONSOLE_WIDTH, '', $msg);
$files = array();
$dirs = array();
read_dir(WORKING_DIR, $files, $dirs);
$total = count($files) + count($dirs);
$x = 1;
foreach ($files as $f) {
	unlink($f);
	show_progress_cli($x++, $total, CONSOLE_WIDTH, '', $msg);
}

foreach ($dirs as $f) {
	rmdir($f); 
	show_progress_cli($x++, $total, CONSOLE_WIDTH, '', $msg);
}

rmdir(WORKING_DIR);


// Write response
out();
out('Package was created in "'.WORKING_FILE.'.tar.bz2"');

copy(WORKING_FILE.'.tar.bz2', ROOT.'/../yacms.scourge.local/www/packages/tree/'.PACKAGE_BRANCH.'/'.PACKAGE_CATEGORY.'/'.PACKAGE_NAME.'-'.PACKAGE_VERSION.'.tar.bz2');
