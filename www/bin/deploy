#!/usr/bin/php
<?


// -- BASICS

	define("ROOT", realpath(__DIR__.'/..'));
	define("NAME", basename($_SERVER['SCRIPT_NAME']));

	require_once ROOT."/etc/init.d/pre-cli.php";
	require_once ROOT."/lib/include/core.cli.php";


// -- CLASSES

	// Options container
	abstract class CLIOptions extends YacmsCLIOptions
	{
		/* Override for console options parent
		 * @return void
		 */
		public static function init()
		{
			self::$opts = array(
				"help"   => array(
					"value" => false,
					"short" => 'h',
					"desc"  => 'Show this help',
				),
				"verbose" => array(
					"value" => false,
					"short" => 'v',
					"desc"  => 'Talkative mode',
				),
				"command" => array(
					"value" => null
				),
				"params"  => array(
					"value" => array()
				),
			);

			self::$info = array(
				"name" => NAME,
				"head" =>
					'YaCMS deploy manager'.CR.
					'Script allowing you to upload your local system version on other environments.'.CR.
					'All necessary informations are read from yacms settings'.CR,

				"foot" => '',
			);
		}
	}


	abstract class CLICommands extends YacmsCLICommands
	{

		public static function __callStatic($env, $args)
		{
			$env == 'run' && give_up("Please enter existing environment or --help for more info");

			Core\System\Settings::env_exists($env) ?
				self::deploy($env):
				give_up("Environment does not exist. Try entering better one or --help for more info");
		}


		/** Run the deploy control process
		 * @return void
		 */
		private static function deploy($env)
		{
			$proceed = null;
			$attempts = 0;

			do {
				$cfg = self::read_info($proceed !== NULL);

				sep();
				out("Please confirm, that these information are correct");

				if ($cfg['protocol'] == 'file') {
					$cfg['host'] = trim(shell_exec('uname -n'));
				}

				self::print_info($cfg);
				echo CR;
				$proceed = is_yes(read("Do you wish to proceed? (yes/no): "));
				!$proceed && sep();
				$attempts ++;
			} while (!$proceed && $attempts < 3);

			if ($proceed) {
				$deploy_method = 'deploy_over_'.$cfg['protocol'];
				self::save_config($cfg, $env);

				if (method_exists('CLICommands', $deploy_method)) {
					self::$deploy_method($cfg, self::get_file_list());
				} else {
					give_up("Your method of deployment has not yet been implemented");
				}
			} else give_up("Giving up after being trolled 3 times");

			echo CR;
		}


		/** Display process info to STDOUT
		 * @return void
		 */
		private static function print_info($cfg)
		{
			out_flist(array(
				"Used protocol" => $cfg['protocol'],
				"Hostname"      => $cfg['host'].($cfg['protocol'] == 'file' ? ' (forced)':''),
				"User"          => $cfg['user'],
				"Remote root"   => $cfg['root']
			));
		}


		/** Try to read necessary info
		 * @return array
		 */
		private static function read_info($reread_cfg = false)
		{
			vout("Checking for stored login information");
			Core\System\Settings::reload();
			$cfg = array();

			if ($p = cfg('deploy', 'protocol')) {
				$cfg = array(
					"protocol" => $p,
					"host"     => cfg('deploy', $p.'_host'),
					"user"     => cfg('deploy', $p.'_user'),
					"pass"     => cfg('deploy', $p.'_pass'),
					"root"     => cfg('deploy', $p.'_root'),
				);
			}

			if ($reread_cfg || empty($cfg['host']) || empty($cfg['user'])) {
				$cfg = self::read_user_info($cfg);
			}

			return $cfg;
		}


		/** Ask user to enter info
		 * @return array Assoc array of info
		 */
		private static function read_user_info(array $cfg)
		{
			$keys = array(
				"protocol" => array(
					"label"   => 'Please choose protocol',
					"type"    => 'string',
					"options" => array('file', 'ssh', 'ftp'),
				),
				"host"     => array(
					"label" => 'Enter valid hostname',
					"type"  => 'string'
				),
				"user"    => array(
					"label" => 'Enter username',
					"type"  => 'string',
				),
				"pass" => array(
					"label" => 'Enter valid password',
					"type"  => 'password'
				),
				"root" => array(
					"label" => 'Enter document root (where index.php will be)',
					"type"  => 'string'
				),
			);
			$data = array();

			foreach ($keys as $key=>$params) {
				while (!isset($data[$key])) {
					$val = null;
					$label = $params['label'];

					if (any($params['options'])) {
						$label .= ' ('.implode(', ', $params['options']).')';
					}

					if (any($cfg[$key]) && $params['type'] != 'password') {
						$label .= ' ['.$cfg[$key].']';
					}

					$val = read($label.': ', $params['type'] == 'password');

					if (!isset($params['options']) || in_array($val, $params['options'])) {
						$data[$key] = $val;
					}

					if (empty($data[$key]) && any($cfg[$key])) {
						$data[$key] = $cfg[$key];
					}
				}
			}

			return $data;
		}


		/** Save deploy configuration
		 * @param array $cfg Current config
		 * @return void
		 */
		private static function save_config(array $cfg, $env)
		{
			vout("Deploy information has been saved");
			cfgs(array("deploy", 'protocol'), $cfg['protocol']);
			cfgs(array("deploy", $cfg['protocol'].'_host'), $cfg['host']);
			cfgs(array("deploy", $cfg['protocol'].'_user'), $cfg['user']);
			cfgs(array("deploy", $cfg['protocol'].'_pass'), $cfg['pass']);
			cfgs(array("deploy", $cfg['protocol'].'_root'), $cfg['root']);
			\Core\System\Settings::save("deploy", $env);
		}


		/** Get list of all files ready to deploy
		 * @param string $dirpath ROOT
		 * @return array
		 */
		private static function get_file_list($dirpath = ROOT)
		{
			$ommited_paths = array(
				'/var/backups',
				'/var/cache',
				'/var/log',
				'/var/thumbs',
				'/var/tmp',
			);

			$files = array();
			$dirpath_diff = substr($dirpath, strlen(ROOT));
			$skip = false;

			if (is_dir($dirpath) && ($dir = opendir($dirpath))) {
				while ($file = readdir($dir)) {
					if (strpos($file, ".") !== 0 || $file == '.htaccess') {

						foreach ($ommited_paths as $op) {
							if (strpos($dirpath_diff, $op) === 0) {
								$skip = true;
								break;
							}
						}

						if (!$skip) {
							if (is_file($p = realpath($dirpath).'/'.$file)) {
								$files[] = $dirpath_diff.'/'.$file;
							} else {
								$files = array_merge($files, self::get_file_list($p));
							}
						} else $skip = false;
					}
				}
			}

			return $files;
		}


		/** Deploy application using local file transfer
		 * @param array $cfg   Configuration
		 * @param array $files List of all files
		 */
		private static function deploy_over_file(array $cfg, array $files)
		{
			out();
			vout("Copying files to another location ..");
			!is_dir($cfg['root']) && mkdir($cfg['root'], 0775, true);
			$total = count($files);
			$x = 0;

			show_progress_cli($x, $total, YacmsCLIOptions::get_con_width());
			foreach ($files as $file) {
				$fdir = dirname($file);
				!is_dir($fd = $cfg['root'].'/'.$fdir) && mkdir($fd, 0775, true);
				copy(ROOT.$file, $cfg['root'].'/'.$file);

				$x++;
				show_progress_cli($x, $total, YacmsCLIOptions::get_con_width(), "Deploy has been finished in %d seconds");
			}
		}


		private static function deploy_over_ftp(array $cfg, array $files)
		{
			out();

			exec("echo \$PATH", $o);
			exec("whoami", $whoami);
			$reqs = false;
			$o = explode(':', $o[0]);
			$whoami = implode("", $whoami);
			$total = count($files);
			$dir_spool = "/home/".$whoami."/.ncftp/spool";

			foreach ($o as $path) {
				if (file_exists($path.'/ncftpls')) {
					$reqs = true;
					break;
				}
			}

			if ($reqs) {
				vout("Copying files over FTP ..");
				if (self::try_ftp_login($cfg['host'], $cfg['user'], $cfg['pass'])) {
					$x = 0;

					vout("Deleting old queue files ..");
					exec("rm -R ".$dir_spool." &> /dev/null");

					vout("Adding files to FTP queue ..");
					show_progress_cli(0, $total, CLIOptions::get_con_width(), NULL);

					foreach ($files as $file) {
						$local = ROOT.$file;
						$remote = dirname($cfg['root'].substr($file, 1));
						exec('ncftpput -bb -u "'.$cfg['user'].'" -p"'.$cfg['pass'].'" "'.$cfg['host'].'" "'.$remote.'" "'.$local.'" >& /dev/null');

						show_progress_cli(++$x, $total, CLIOptions::get_con_width(), NULL);
					}

					$x = 0;
					show_progress_cli(0, $total, CLIOptions::get_con_width(), NULL);
					$ph = popen("ncftpbatch -D", 'r');

					while (!feof($ph) && $line = fgets($ph)) {
						if (strpos($line, "Done") === 0) {
							show_progress_cli(++$x, $total, CLIOptions::get_con_width(), "Uploaded in %d seconds");
						}
					}

					pclose($ph);

				} else give_up("Failed to login over FTP.");
			} else give_up("Please install ncftp");

		}


		private static function try_ftp_login($host, $user, $pass)
		{
			return !trim(shell_exec("ncftpls -u ${user} -p ${pass} ftp://${host} | grep ncftpls | wc -l"));
		}
	}




// -- RUNTIME

	require_once ROOT."/etc/init.d/cli.php";
