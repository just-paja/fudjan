#!/usr/bin/php
<?

// -- BASICS

	define("ROOT", realpath(__DIR__.'/..'));
	define("NAME", basename($_SERVER['SCRIPT_NAME']));

	require_once ROOT."/etc/init.d/pre-cli.php";
	require_once ROOT."/etc/init.d/core.php";
	require_once ROOT."/lib/include/core.cli.php";

// -- CLASSES

	// Options container
	abstract class CLIOptions extends YacmsCLIOptions
	{
		/* Override for console options parent
		 * @return void
		 */
		public static function init()
		{
			self::$opts = array(
				"env"   => array(
					"value" => false,
					"short" => 'e',
					"desc"  => 'Use this environment',
				),
				"force"   => array(
					"value" => false,
					"short" => 'f',
					"desc"  => 'Force action',
				),
				"help"   => array(
					"value" => false,
					"short" => 'h',
					"desc"  => 'Show this help',
				),
				"verbose" => array(
					"value" => false,
					"short" => 'v',
					"desc"  => 'Talkative mode',
				),
				"command" => array(
					"value" => null
				),
				"params"  => array(
					"value" => array()
				),
			);

			self::$commands = array(
				"broken"    => 'List all ya-files that have been changed since install',
				"browse"    => array(
					'single'     => 'Get list of all available packages',
					'categories' => 'Browse category from these categories only',
				),
				"files"     => array(
					'single' => "List all installed files",
					'prefix' => "List all installed files with prefix",
				),
				"install"   => array(
					'packages' => "Install packages"
				),
				"installed" => 'Get list of installed ya-packages',
				"remove"    => array(
					"package" => 'Remove package from system',
				),
				"repo"      => 'Get list of available configured repositories',
				"search"      => array(
					"name" => 'Lookup package with simillar name',
				),
				"sync"      => array(
					"single" => 'Reload package list from all repositories',
					"repo repo"   => 'Reload package list from selected repositories'
				),
				"updates"   => array(
					'single' => "Get list of available stable versions",
					'branch' => "Get list of available versions from this branch",
				),
				"upgrade"   => array(
					'single'   => "Upgrade all packages to the latest version",
					'packages' => "Upgrade packages",
				),
			);

			self::$info = array(
				"name" => NAME,
				"head" =>
					'Santa package manager'.NL.
					'Internal package manager for YaWF system'.NL,
				"foot" => 'Did you know you can have your own package repoitory for Santa?'.NL,
			);
		}
	}


	abstract class CLICommands extends YacmsCLICommands
	{
		public static function repo()
		{
			System\Init::basic();
			out_flist(System\Santa::get_repo_list());
		}


		public static function sync()
		{
			\System\Init::Basic();
			$list = \System\Santa::get_repo_list();
			$sync = array();
			$params = YacmsCLIOptions::get('params');

			if (any($params)) {
				foreach ($params as $param) {
					if (isset($list[$param])) {
						$sync[$param] = $list[$param];
					} else give_up(sprintf('Repository is not configured: %s', $param));
				}
			} else {
				$sync = $list;
			}

			out('Syncing local tree with remote repositories');
			\System\Cli::do_over($sync, function($repo, $url) {
				\System\Santa::sync_from($repo);
			});

			out();
			self::updates();
		}


		/** Get list of all installed ya-packages
		 * @return void
		 */
		public static function installed()
		{
			\System\Init::basic();
			$packages = \System\Santa::get_all_installed();
			self::print_packages($packages);
			out(sprintf(l('Found %s installed packages.'), count($packages)));
		}


		/** Connect to mothership and check for new code
		 * @return array Set of updates
		 */
		public static function updates()
		{
			\System\Init::Basic();
			$updates = System\Santa::get_update_list();

			if (any($updates)) {
				out(sprintf(l('Updates available: %s'), count($updates)));

				self::print_packages($updates);
			} else {
				vout('No updates found');
			}
		}


		/** Get list of all available packages
		 * @return void
		 */
		public static function browse()
		{
			System\Init::basic();
			$params = YacmsCLIOptions::get('params');
			$params = array_filter(array_unique($params));

			if (any($params)) {
				$packages = array();

				foreach ($params as $param) {
					$packages = array_merge($packages, System\Santa::get_all($param));
				}
			} else {
				$packages = System\Santa::get_all();
			}

			self::print_packages($packages);
		}


		public static function search()
		{
			\System\Init::Basic();
			$params = YacmsCLIOptions::get('params');

			if (any($params)) {
				$packages = System\Santa::search($params);

				if (any($packages)) {
					self::print_packages($packages);
				} else {
					out('No packages were found.');
				}
			} else give_up('Please input at least one parameter of search.');
		}



		/** Install a set of packages
		 * @return void
		 */
		public static function install()
		{
			System\Init::Basic();
			$params = YacmsCLIOptions::get('params');

			if (any($params)) {
				$packages = array();
				$install  = array();

				foreach ($params as $pkg_name) {
					if ($pkg = \System\Santa::find($pkg_name)) {
						$packages[] = $pkg;
					} else {
						give_up(sprintf('Package "%s" does not exist.', $pkg_name));
						break;
					}
				}

				if (any($packages)) {
					foreach ($packages as $pkg) {
						$latest = $pkg->get_latest_version();
						if ($latest) {
							$install[] = $latest;
						} else give_up(sprintf('No version is available for package "%s".', $pkg->get_full_name()));
					}

					if (any($install)) {
						self::print_package_changes($install, 'install');

						out();
						if ($proceed = is_yes(read('Do you wish to proceed? ['.System\Cli::term_color('Yes', 'light_green').'/'.System\Cli::term_color('No', 'light_red').'] '))) {
							self::hard_install($install);
						}

						\System\Router::update_rewrite();
					}
				} else give_up('No valid packages were found to install.');
			} else out('Please input package name or use --help');
		}


		/** Print list of packages
		 * @return void
		 */
		private static function print_packages(array $packages)
		{
			foreach($packages as $pkg) {
				$available = $pkg->get_available();
				$print = array(
					'Installed version'  => $pkg->is_installed() ? System\Cli::term_color($pkg->get_installed_version()->name(), 'yellow'):'',
				);

				$versions = array();

				foreach ($available as $version) {
					$ver  = &$versions[$version->repo][];
					$gray = $version->branch != 'stable' && $version->branch != 'unstable';

					if ($pkg->is_installed() && $version->branch != System\Cli::term_remove_color('testing')) {
						$installed = $pkg->get_installed_version();
						$status = $version->greater_than($installed);
						$color = 'normal';

						if ($status === true) $color = 'light_green';
						if ($status === false) $color = 'gray';

						if (is_null($status) && $version->repo == $installed->repo) {
							$gray = false;
							$color = 'yellow';
						}

						$ver = System\Cli::term_color($version->short_name(), $color);
					} else {
						$ver = $version->short_name();
					}

					if ($gray) {
						$ver = System\Cli::term_color($ver, 'gray');
					}
				}

				foreach ($versions as $repo => $packages) {
					usort($packages, array('\System\Santa', 'sort_packages_version_helper'));
					if (any($packages)) {
						$print[sprintf('%s versions', ucfirst($repo))] = implode(', ', $packages);
					}
				}

				$print['Project Name'] = $pkg->project;
				$print['Homepage']     = $pkg->homepage;
				$print['Description']  = $pkg->desc;

				unset($ver);
				$status = '';
				if ($pkg->is_installed()) {
					$status = System\Cli::term_color('I', 'light_green');
				} elseif ($pkg->is_available_for_update()) {
					$status = System\Cli::term_color('U', 'light_green');
				} else {
					$status = System\Cli::term_color('-', 'green');
				}

				out('['.$status.'] '.$pkg->get_full_name());
				out_flist($print, true, 4, false, 'green', true);
				out();
			}
		}


		private static function print_package_changes(array $packages, $action)
		{
			out('Following package changes will be made:');

			foreach ($packages as $ver) {
				$status = System\Cli::term_color('?', 'red');

				if ($action == 'install') {
					if ($ver->pkg()->is_installed()) {
						if ($ver->is_installed()) {
							$status = System\Cli::term_color('R', 'yellow');
						} else {
							$ver_installed = $ver->pkg()->get_installed_version();

							if ($ver->greater_than($ver_installed)) {
								$status = System\Cli::term_color('U', 'light_green');
							} else {
								$status = System\Cli::term_color('D', 'light_red');
							}
						}
					} else {
						$status = System\Cli::term_color('N', 'light_green');
					}
				}

				if ($action == 'remove') {
					$status = System\Cli::term_color('C', 'light_red');
				}

				out('  ['.$status.'] '.$ver->full_name());
			}
		}

		/** Generate .gitignore and print it into STDOUT
		 * @return void
		 */
		public static function files()
		{
			\System\Init::basic();
			$params = CLIOptions::get('params');
			$files = \System\Santa::get_all_installed_files();
			$prefix = isset($params[0]) ? $params[0]:'';

			foreach ($files as $file) {
				out($prefix.substr($file['path'], strlen($prefix) == 0));
			}
		}


		public static function remove()
		{
			\System\Init::basic();
			$params = array_filter(array_unique(YacmsCLIOptions::get('params')));

			if (any($params)) {
				foreach ($params as $pkg_name) {
					if ($pkg = \System\Santa::find($pkg_name)) {
						if ($pkg->is_installed()) {
							$packages[$pkg->get_full_name()] = $pkg->get_installed_version();
						} else give_up(sprintf('Package "%s" is not installed.', $pkg->get_full_name()));
					} else give_up(sprintf('Package "%s" was not found.', $pkg_name));
				}

				if (any($packages)) {
					self::print_package_changes($packages, 'remove');
					out();

					if ($proceed = is_yes(read('Do you wish to proceed? ['.System\Cli::term_color('Yes', 'light_green').'/'.System\Cli::term_color('No', 'light_red').'] '))) {
						\System\Cli::do_over($packages, function($key, $pkg) {
							$pkg->remove();
						});

						out();
						out(sprintf('Removed %d packages.', count($packages)));
					}
				}
			} else give_up('Please select some packages to be removed.');
		}

		/** Generate .gitignore and print it into STDOUT
		 * @return void
		 */
		public static function broken()
		{
			System\Init::Basic();
			$files = \Santa\Package::get_all_installed_files();
			$mod = $del = 0;

			foreach ($files as $file) {
				//out(ROOT.$file['path']);
				if (file_exists(ROOT.$file['path'])) {
					$sum = md5(file_get_contents(ROOT.$file['path']));
					if ($sum != $file['checksum']) {
						out("modified: ".$file['path']);
						$mod ++;
					}
				} else {
					out("deleted: ".$file['path']);
					$del ++;
				}
			}

			if ($mod || $del) {
				vout();
				if ($mod && $del) {
					vout("Total of ".$mod." modified and ".$del." deleted files");
				} elseif ($mod) {
					vout("Total of ".$mod." modified files");
				} else {
					vout("Total of ".$del." deleted files");
				}
			}
		}


		/** Update the system
		 * @return array Set of updates
		 */
		public static function upgrade()
		{
			System\Init::basic();
			$packages = \System\Santa::get_update_list();
			$updates  = array();

			foreach ($packages as $pkg) {
				$updates[] = $pkg->get_latest_version();
			}

			if (any($updates)) {
				self::print_package_changes($updates, 'install');
				out();

				if ($proceed = is_yes(read('Do you wish to proceed? ['.System\Cli::term_color('Yes', 'light_green').'/'.System\Cli::term_color('No', 'light_red').'] '))) {
					self::hard_install($updates);
				}

				passthru(ROOT.'/bin/system'.(CLIOptions::get('verbose') ? ' -v':'').' htaccess');
			} else out(l('There are no upgrades for selected packages.'));

		}



		/** Install a set of packages
		 * @param array $packages
		 */
		private static function hard_install(array $packages)
		{
			out('Installing packages ..');
			$total = count($packages);

			//~ $msg = ;
			\System\Cli::do_over($packages, function($key, $pkg) {
				$pkg->download() || give_up(sprintf('Failed to download package "%s"', $pkg->full_name));
			}, 'Downloading packages ..       ');


			\System\Cli::do_over($packages, function($key, $pkg) {
				$pkg->extract() || give_up(sprintf('Failed to extract package %s', $pkg->full_name()));
			}, 'Extracting packages ..        ');

			\System\Cli::do_over($packages, function($key, $pkg, $packages) {
				if ($result = $pkg->get_file_conflicts(\System\Santa::get_all_installed_versions())) {
					out();
					out();
					out(sprintf('Found %s file conflicts for package %s:', \System\Cli::term_color(count($result), 'light_red'), \System\Cli::term_color($pkg->full_name(), 'light_red')));

					foreach ($result as $file) {
						out('  '.$file['package'].': '.$file['file']);
					}

					exit(1);
				}
			}, 'Checking for file conflicts ..');


			\System\Cli::do_over($packages, function($key, $pkg) {
				$pkg->install();
			}, 'Installing packages ..        ');

			\System\Cli::do_over($packages, function($key, $pkg) {
				$pkg->clear_tmp();
			}, 'Cleaning temporary files ..   ');

			out();
			out(sprintf('Installed %d packages.', count($packages)));
		}
	}



// -- RUNTIME

	System\Init::cli();
